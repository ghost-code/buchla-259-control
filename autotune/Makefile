DEVICE     = attiny84
CLOCK      = 13500000
PROGRAMMER = -c usbtiny 
OBJECTS    = main.o
FUSES      = -U lfuse:w:0xED:m -U hfuse:w:0xDD:m -U efuse:w:0xFE:m

AVRDUDE = avrdude $(PROGRAMMER) -p $(DEVICE)
COMPILE = avr-gcc -Wall -O3 -DF_CPU=$(CLOCK)UL -mmcu=$(DEVICE)
SRC = src


# symbolic targets:
all:	main.hex

.c.o:
	$(COMPILE) -c $< -o $@

.S.o:
	$(COMPILE) -x assembler-with-cpp -c $< -o $@
# "-x assembler-with-cpp" should not be necessary since this is the default
# # file type for the .S (with capital S) extension. However, upper case
# # characters are not always preserved on Windows. To ensure WinAVR
# # compatibility define the file type manually.

.c.s:
		$(COMPILE) -S $< -o $@

flash:	all
		$(AVRDUDE) -U flash:w:main.hex:i

fuse:
		$(AVRDUDE) $(FUSES)

install: flash fuse

# if you use a bootloader, change the command below appropriately:
load: all
		bootloadHID main.hex

clean:
		rm -f main.hex main.elf $(OBJECTS)

# file targets:

main.elf: $(OBJECTS)
		$(COMPILE) -o main.elf $(OBJECTS)

main.hex: main.elf
		rm -f main.hex
			avr-objcopy -j .text -j .data -O ihex main.elf main.hex

# If you have an EEPROM section, you must also create a hex file for the
# # EEPROM and add it to the "flash" target.
#
# # Targets for code debugging and analysis:

disasm:	main.elf
		avr-objdump -d main.elf

cpp:
		$(COMPILE) -E $(SRC)/main.c

